Frontend: Creating the "Add Blog" Form (React)
Step 1: Build the UI Component
Create a new component (e.g., Addblog.jsx) with a form containing all the necessary input fields:

Image Upload: An <input type="file" /> hidden behind a styled <label> for a better user experience.

Text Inputs: For title and subTitle.

Rich Text Editor: Use a library like Quill.js for the description to allow for text formatting.

Dropdown: A <select> tag for the category.

Checkbox: An <input type="checkbox" /> to mark the post as isPublished.

Submit Button: A <button type="submit">.

Step 2: Manage Form State
Use the useState hook to manage the form's data. It's best to use separate states for the file and the text-based data.



const [image, setImage] = useState(null);
const [description, setDescription] = useState(''); // For the Quill editor
const [blogData, setBlogData] = useState({
  title: '',
  subTitle: '',
  category: 'Technology',
  isPublished: false,
});

Step 3: Handle Input Changes
Create event handlers to update the state as the user interacts with the form.

handleImageChange: Updates the image state from the file input.

handleChange: A single function to update the blogData object for all text, select, and checkbox inputs.

Quill Editor: Initialize Quill in a useEffect hook and use its on('text-change', ...) event to update the description state.

Step 4: Handle Form Submission
Create a handleSubmit function that:

Prevents the default form submission.

Creates a new FormData() object.

Appends all the data from your state (including the image file and the Quill description) to the FormData object.

Sends this FormData object to your backend API using a fetch or axios POST request.

Resets the form fields after a successful submission.




-----------------Backend----------------------------------




Backend: Creating the API Endpoint (Node.js & Express)
Step 1: Set Up the Server and Dependencies
Install the necessary packages for your server.

npm i express mongoose cors dotenv jsonwebtoken multer
Create a basic Express server in server.js that listens on a specified port.

Step 2: Configure Middleware
In your server.js, configure the necessary middleware.

cors(): To allow requests from your frontend.

express.json(): To parse JSON data from request bodies.

multer: To handle file uploads. Create a multer.js middleware file to configure it for temporary disk storage.

Step 3: Create the Blog Model
Define the structure for your blog posts using a Mongoose schema (blog.js). This should include fields for title, description, image (as a String for the URL), etc., and enable timestamps.

Step 4: Create the API Route
Define the route that will handle the form submission.


// In blogRoutes.js
import upload from '../middleware/multer.js';
import { createBlog } from '../controllers/blogController.js';

blogRouter.post("/add", upload.single("image"), createBlog);
This route uses the upload.single("image") middleware to process the uploaded image file before passing the request to the createBlog controller.

Step 5: Write the Controller Logic
Create the createBlog function that will execute when the /add route is hit. This function will:

Parse Data: Get the text data from req.body and the file data from req.file.

Validate Input: Ensure all required fields are present.

Upload Image: Upload the image file to a cloud service like ImageKit.

Optimize Image: Generate an optimized URL from the cloud service (e.g., resized, converted to WebP).

Save to Database: Use the Mongoose Blog.create() method to save the blog post to your database, using the optimized image URL.

Send Response: Send a success message back to the frontend.